module Main where

import Util
import Control.Applicative ((<|>))
import Control.Arrow ((***))
import Control.Concurrent (putMVar,takeMVar,forkIO,newEmptyMVar)
import Control.Monad (when)
import Data.Bits (Bits,popCount)
import Data.Bits.Bitwise (fromListLE)
import Data.Array (Array,listArray,bounds,(!))
import Data.List (sortOn,unfoldr,(\\),sort,foldl',minimumBy)
import Data.Maybe (listToMaybe,maybeToList,isJust,mapMaybe)
import System.Environment (getArgs)
import qualified Data.Map as Map

data SearchType = IncludedSearch
                | SubsetSearch
                | NaiveSearch deriving Show

data Subset = BinarySubset [Integer]
            | ExplicitSubset (Array Int [Integer])

instance Show Subset where
  show (BinarySubset items) = "Binary " ++ show items
  show (ExplicitSubset arr) = "Explicit [0.." ++ show (sum $ arr ! snd (bounds arr)) ++ "]"

maxValue :: Subset -> Integer
maxValue s = value (size s - 1) s

size :: Subset -> Int
size (BinarySubset xs) = 2 ^ length xs
size (ExplicitSubset arr) = 1 + snd (bounds arr)

values :: Int -> Subset -> [Integer]
values n (BinarySubset xs) = bitFilter n xs
values n (ExplicitSubset arr) = arr ! n

unvalues :: [Integer] -> Subset -> Int
unvalues items ss = fromListLE $  map (flip elem items) $ values (size ss - 1) ss

items :: Subset -> [Integer]
items s = values (size s - 1) s

value :: Int -> Subset -> Integer
value n = sum . values n

explicitSubset :: [Integer] -> Subset
explicitSubset items = ExplicitSubset $ listArray (0,lastIndex) entries
  where entries = sortOn sum $ map (flip bitFilter items) [0..lastIndex]
        lastIndex = (2 ^ length items - 1) :: Int

extractBinarySubset :: [Integer] -> Maybe (Subset,[Integer])
extractBinarySubset = filterMaybe . rev. extractSubset
  where filterMaybe (i,e) = if length i >= 8 then Just (BinarySubset i,e) else Nothing
        rev = reverse *** reverse
        extractSubset = foldl (\(i,e) el -> if sum i <= el then (el:i,e) else (i,el:e)) ([],[])

extractExplicitSubset :: [Integer] -> Maybe (Subset,[Integer])
extractExplicitSubset []    = Nothing
extractExplicitSubset items = Just (explicitSubset i, e)
  where (i,e) = partitionEvery k items
        k = 1 + (length items `div` 10)

extractSubset :: [Integer] -> Maybe (Subset,[Integer])
extractSubset items = extractBinarySubset items <|> (extractExplicitSubset items)

extractSubsets :: [Integer] -> [Subset]
extractSubsets = unfoldr extractSubset

findNearest :: Integer -> Subset -> Int
findNearest target s = findr 0 $ size s
  where findr min max
         | v < target && p > min = findr p max
         | v > target && p < max = findr min p
         | otherwise             = p
           where p = min + (max - min) `div` 2
                 v = value p s

vectorValues :: [Int] -> [Subset] -> [Integer]
vectorValues ns = concatMap (uncurry values) . zip ns

vectorValue :: [Int] -> [Subset] -> Integer
vectorValue ns = sum . zipWith value ns

dropEqualBy :: Ord b => (a -> b) -> [a] -> [a]
dropEqualBy f = foldr consIfDifferent []
  where consIfDifferent x [] = [x]
        consIfDifferent x (y:ys) = if f x == f y then y:ys else x:y:ys

alternate :: [a] -> [a] -> [a]
alternate (x:xs) ys = x : alternate ys xs
alternate _ ys = ys

startVector :: Integer -> [Subset] -> [Int]
startVector target subsets = snd $ unzip $ tail $ scanl scanf ((max,target),0) subsets
  where max = sum $ map maxValue subsets
        scanf ((total,target),i) subset = ((total - maxValue subset, target - value nearest subset), nearest)
          where nearest = findNearest ((target * maxValue subset) `div` total) subset

selectionAsVector :: [Integer] -> [Subset] -> [Int]
selectionAsVector items []     = []
selectionAsVector items (s:ss) = i : selectionAsVector r ss
  where i = unvalues items s
        r = items \\ (values i s)

startVectorBySize :: Integer -> Int -> [Subset] -> [Int]
startVectorBySize target k subsets = selectionAsVector selected subsets
  where selected = itemSelectionBySize target k (concatMap items subsets)

itemSelectionBySize :: Integer -> Int -> [Integer] -> [Integer]
itemSelectionBySize target k [] = []
itemSelectionBySize target k items = if k <= 0 then [] else selected : (itemSelectionBySize (target - selected) (k - 1) remaining)
  where (selected:remaining) = closest (target `div` (toInteger k)) items

equalAlternatives :: Int -> Subset -> [Int]
equalAlternatives p xs = alternate lower higher
  where lower  = takeWhile (\p -> v == value p xs) $ takeWhile (>=0) $ map (p-) [0..]
        higher = takeWhile (\p -> v == value p xs) $ takeWhile (< max) $ map (p+) [1..]
        v      = value p xs
        max    = size xs

alternatives :: Int -> Subset -> [Int]
alternatives p xs = alternate lower higher
  where lower  = dropEqualBy (flip value xs) $ (takeWhile (>=0) $ map (p-) [0..])
        higher = dropEqualBy (flip value xs) $ (takeWhile (< max) $ map (p+) [1..])
        max    = size xs

alternativesTree :: [[Int]] -> [([Int],[[Int]])]
alternativesTree [] = []
alternativesTree ((x:y:[]):ys) = (y:(map head ys),[y]:ys) : (map (\(z,as) -> (x:z,(x:y:[]):as)) $ alternativesTree ys)
alternativesTree ((x:y:xs):ys) = (y:(map head ys),(xs):ys) : (map (\(z,as) -> (x:z,(x:y:xs):as)) $ alternativesTree ys)
alternativesTree ([x]:ys) = map (\(y,as) -> (x:y,[x]:as)) $ alternativesTree ys

breadthFirstAlternatives :: [[Int]] -> [[Int]]
breadthFirstAlternatives xs = now ++ concatMap breadthFirstAlternatives later
  where (now,later) = unzip $ alternativesTree xs

alternateEveryOnce :: [[Int]] -> [[Int]]
alternateEveryOnce []            = []
alternateEveryOnce ((x:y:xs):ys) = (y:(map head ys)) : (map (x:) $ alternateEveryOnce ys)
alternateEveryOnce ([x]:ys)      = map (x:) $ alternateEveryOnce ys

vectorAlternatives :: [Int] -> [Subset] -> [[Int]]
vectorAlternatives ps subsets = map (uncurry alternatives) $ zip ps subsets

optimize :: Integer -> [Int] -> [Subset] -> Maybe [Int]
optimize 0 x y = Just x
optimize diff [] []         = Nothing
optimize diff (s:ss) (x:xs) =
  if value nearest x == target
  then Just (nearest:ss)
  else fmap (s :) $ optimize diff ss xs
  where nearest = findNearest target x
        target = fromInteger (toInteger (value s x) + diff)

optimizeSize :: Int -> [Int] -> [Subset] -> Maybe [Int]
optimizeSize 0 x y = Just x
optimizeSize diff [] [] = Nothing
optimizeSize diff (s:ss) (x:xs) =
  fmap (bestAlternative :) $ optimizeSize (diff - delta bestAlternative) ss xs
  where orig = popCount s
        delta x = popCount x - orig
        bestAlternative = head $ sortOn (\x -> abs $ diff - delta x) (equalAlternatives s x)

naiveIterate :: Integer -> [Integer] -> Map.Map (Integer,Int) [Integer] -> Map.Map (Integer,Int) [Integer]
naiveIterate i xs map = foldl' (naiveInsert i) map $ zip xs (zip (tail xs ++ [0]) [1..])

naiveRanges :: [Integer] -> [Integer]
naiveRanges items = foldr (\(l,h) f _ -> [l..h] ++ f h) (\h -> [h..]) ranges 0
  where ranges = takeWhile (\(l,h) -> h-l <= min) $ iterate (\(l,h) -> (l+min,h+max)) (min,max)
        min = minimum items
        max = maximum items

naiveInsert :: Integer -> Map.Map (Integer,Int) [Integer] -> (Integer,(Integer,Int)) -> Map.Map (Integer,Int) [Integer]
naiveInsert i map (y,(x,j)) =
  if i >= y then Map.alter (<|> (fmap (y:) $ Map.lookup (i - y,j-1) map)) (i,j) as else as
    where as = maybe (map) (\xs -> Map.insert (i,j) xs map) (Map.lookup (i,j-1) map)

naiveSearch :: Integer -> [Integer] -> [[Integer]]
naiveSearch n xs
  | n < 0 = []
  | n == 0 = [[]]
  | otherwise = maybeToList $ Map.lookup (n,length xs) $ foldl (\map n -> naiveIterate n xs map) startMap (naiveRanges xs)
    where startMap = Map.fromList $ map (\(x,j) -> ((0,j),[])) (zip xs [0..])

optimizeInput :: Integer -> [Integer] -> (Integer,[Integer],[Integer] -> [Integer])
optimizeInput target items = if max - target < target then (max - target, items, (items \\)) else (target,takeWhile (<= target) $ dropWhile (<=0) $ items,id)
  where n = length items
        maxK = (1+) $ length $ takeWhile (target>) $ scanl1 (+) items
        minK = (1+) $ length $ takeWhile (target>) $ scanl1 (+) (reverse items)
        max = sum items

maxK target items = length $ takeWhile (target>=) $ scanl1 (+) items
minK target items = (1+) $ length $ takeWhile (target>) $ scanl1 (+) (reverse items)

optimizeSubsetSearchInput :: Integer -> [Integer] -> (Integer,[Integer],Maybe Int,[Integer] -> Maybe [Integer])
optimizeSubsetSearchInput target items =
  if mink == maxk
  then (target',items',Just (fromInteger mink),f)
  else (target,items,Nothing,Just)
    where n = length items
          maxk = toInteger $ maxK target items
          mink = toInteger $ minK target items
          min = minimum items
          max = sum items
          target' = target - mink * min
          items' = map (\x -> x-min) items
          f res = if diff == 0 then Just (map (+min) res) else Nothing
            where diff = mink - toInteger (length res)

subsetSearch :: Integer -> [Integer] -> [[Integer]]
subsetSearch rawTarget rawItems = if target >= 0 then mapMaybe (\x -> f $ vectorValues x subsets) resultVectors else []
  where (target,items,sizeHint,f) = optimizeSubsetSearchInput rawTarget rawItems
        subsets = extractSubsets items
        start = maybe (startVector target subsets) (\x -> startVectorBySize target x subsets) sizeHint
        alternatives = start : (breadthFirstAlternatives $ vectorAlternatives start subsets)
        resultVectors = mapMaybe (\ps -> optimize (toInteger target - toInteger (vectorValue ps subsets)) ps subsets) alternatives

includedSearch :: Integer -> [Integer] -> [[Integer]]
includedSearch target = map (:[]) . take 1 . filter (==target)

main = do
  args <- getArgs
  rawTarget <- readLn
  unorderedItems <- readLn
  let sortedItems = sort unorderedItems
  let (target,items,t) = optimizeInput rawTarget sortedItems
  resultV <- newEmptyMVar
  _ <- forkIO $ let r = listToMaybe (includedSearch target items) in when (isJust r) $ putMVar resultV (IncludedSearch,r)
  _ <- forkIO $ let r = listToMaybe $ naiveSearch target items in seq r $ putMVar resultV (NaiveSearch,r)
  _ <- forkIO $ let r = listToMaybe $ subsetSearch target items in seq r $ putMVar resultV (SubsetSearch,r)
  (searchType,rawResult) <- takeMVar resultV
  let result = fmap t $ rawResult
  --when (target /= rawTarget) (putStrLn $ "optimized target: " ++ (show target) ++ " (was " ++ (show rawTarget) ++ ")")
  --when (items /= sortedItems) (putStrLn $ "optimized items: " ++ (show items) ++ " (was " ++ (show sortedItems) ++ ")")
  print (searchType,result)

helmarTarget = 4344208229358599520151
helmar = sort [9223372036854775856, 9223372036854775989, 9223372036854776146,9223372036854776256, 9223372036854775846, 9223372036854776254,9223372036854776101, 9223372036854776253, 9223372036854776245,9223372036854776242, 9223372036854776140, 9223372036854775874,9223372036854776125, 9223372036854775964, 9223372036854776285,9223372036854775971, 9223372036854775877, 9223372036854775924,9223372036854775920, 9223372036854775970, 9223372036854775851,9223372036854776259, 9223372036854775965, 9223372036854775894,9223372036854775832, 9223372036854776292, 9223372036854776197,9223372036854775943, 9223372036854776267, 9223372036854776230,9223372036854776169, 9223372036854776126, 9223372036854775822,9223372036854775982, 9223372036854776293, 9223372036854775860,9223372036854775883, 9223372036854776153, 9223372036854776123,9223372036854775822, 9223372036854776272, 9223372036854776213,9223372036854776285, 9223372036854776216, 9223372036854776039,9223372036854775821, 9223372036854776087, 9223372036854775873,9223372036854776101, 9223372036854775949, 9223372036854776275,9223372036854776240, 9223372036854775910, 9223372036854775940,9223372036854776140, 9223372036854775890, 9223372036854776046,9223372036854775837, 9223372036854775923, 9223372036854775927,9223372036854776226, 9223372036854776145, 9223372036854775946,9223372036854776114, 9223372036854776279, 9223372036854775875,9223372036854775903, 9223372036854776186, 9223372036854775944,9223372036854776151, 9223372036854776077, 9223372036854776285,9223372036854775827, 9223372036854775976, 9223372036854776015,9223372036854776051, 9223372036854776047, 9223372036854776203,9223372036854775812, 9223372036854776219, 9223372036854775815,9223372036854776092, 9223372036854776166, 9223372036854776058,9223372036854775821, 9223372036854775906, 9223372036854775829,9223372036854776084, 9223372036854776230, 9223372036854775947,9223372036854776259, 9223372036854776154, 9223372036854776046,9223372036854775827, 9223372036854776057, 9223372036854776113,9223372036854776033, 9223372036854776103, 9223372036854776045,9223372036854776081, 9223372036854776275, 9223372036854775981,9223372036854776010, 9223372036854775913, 9223372036854776166,9223372036854776283, 9223372036854776263, 9223372036854776153,9223372036854776013, 9223372036854776243, 9223372036854776088,9223372036854776067, 9223372036854775957, 9223372036854776225,9223372036854776049, 9223372036854776135, 9223372036854776062,9223372036854776244, 9223372036854775878, 9223372036854775871,9223372036854776197, 9223372036854776280, 9223372036854776262,9223372036854776115, 9223372036854776274, 9223372036854775809,9223372036854775829, 9223372036854776133, 9223372036854775911,9223372036854776239, 9223372036854776287, 9223372036854776093,9223372036854776046, 9223372036854776117, 9223372036854776235,9223372036854776081, 9223372036854776283, 9223372036854775837,9223372036854775992, 9223372036854776095, 9223372036854776173,9223372036854775937, 9223372036854776201, 9223372036854775966,9223372036854776015, 9223372036854776265, 9223372036854775876,9223372036854775837, 9223372036854776251, 9223372036854776197,9223372036854776157, 9223372036854776195, 9223372036854775862,9223372036854775843, 9223372036854776244, 9223372036854775836,9223372036854775911, 9223372036854775962, 9223372036854776209,9223372036854775928, 9223372036854776041, 9223372036854775965,9223372036854776206, 9223372036854776021, 9223372036854776171,9223372036854775994, 9223372036854776176, 9223372036854775928,9223372036854775844, 9223372036854776152, 9223372036854775996,9223372036854776120, 9223372036854776163, 9223372036854776201,9223372036854775930, 9223372036854776146, 9223372036854776169,9223372036854775831, 9223372036854776190, 9223372036854776281,9223372036854776141, 9223372036854775938, 9223372036854775886,9223372036854776176, 9223372036854776019, 9223372036854775930,9223372036854776039, 9223372036854775900, 9223372036854776044,9223372036854775813, 9223372036854775945, 9223372036854776223,9223372036854775823, 9223372036854776184, 9223372036854775932,9223372036854776245, 9223372036854775954, 9223372036854776089,9223372036854776145, 9223372036854776166, 9223372036854775921,9223372036854775996, 9223372036854776305, 9223372036854776115,9223372036854775819, 9223372036854776289, 9223372036854775875,9223372036854776231, 9223372036854776256, 9223372036854775849,9223372036854776162, 9223372036854775961, 9223372036854776079,9223372036854775961, 9223372036854775983, 9223372036854776169,9223372036854776190, 9223372036854775925, 9223372036854776065,9223372036854776215, 9223372036854775923, 9223372036854775812,9223372036854776300, 9223372036854776212, 9223372036854776007,9223372036854776011, 9223372036854776033, 9223372036854775991,9223372036854776142, 9223372036854776107, 9223372036854775997,9223372036854776064, 9223372036854776283, 9223372036854775911,9223372036854775997, 9223372036854775958, 9223372036854775931,9223372036854776196, 9223372036854775980, 9223372036854776088,9223372036854776239, 9223372036854776097, 9223372036854776037,9223372036854776127, 9223372036854776130, 9223372036854775972,9223372036854775920, 9223372036854776287, 9223372036854776204,9223372036854775851, 9223372036854776269, 9223372036854776186,9223372036854776248, 9223372036854776106, 9223372036854776034,9223372036854776002, 9223372036854776106, 9223372036854775850,9223372036854776194, 9223372036854776258, 9223372036854776120,9223372036854776225, 9223372036854776028, 9223372036854775976,9223372036854775951, 9223372036854776211, 9223372036854776306,9223372036854776042, 9223372036854776247, 9223372036854775883,9223372036854776187, 9223372036854775872, 9223372036854776007,9223372036854776120, 9223372036854775922, 9223372036854775929,9223372036854776262, 9223372036854776083, 9223372036854775986,9223372036854776195, 9223372036854776085, 9223372036854776145,9223372036854775997, 9223372036854776019, 9223372036854775892,9223372036854775956, 9223372036854776218, 9223372036854775889,9223372036854775851, 9223372036854776068, 9223372036854776129,9223372036854776205, 9223372036854775841, 9223372036854776220,9223372036854776001, 9223372036854776098, 9223372036854776000,9223372036854776181, 9223372036854776104, 9223372036854775866,9223372036854776285, 9223372036854776128, 9223372036854775984,9223372036854776251, 9223372036854776150, 9223372036854776196,9223372036854775890, 9223372036854775891, 9223372036854776097,9223372036854776161, 9223372036854776288, 9223372036854776159,9223372036854775906, 9223372036854775900, 9223372036854776278,9223372036854776287, 9223372036854775877, 9223372036854776040,9223372036854776165, 9223372036854775955, 9223372036854776023,9223372036854776139, 9223372036854776037, 9223372036854775885,9223372036854776305, 9223372036854776090, 9223372036854776051,9223372036854775946, 9223372036854775896, 9223372036854775981,9223372036854775840, 9223372036854776075, 9223372036854776113,9223372036854776093, 9223372036854776004, 9223372036854776293,9223372036854775921, 9223372036854775812, 9223372036854775820,9223372036854775887, 9223372036854775866, 9223372036854776062,9223372036854776108, 9223372036854776194, 9223372036854776215,9223372036854776226, 9223372036854775938, 9223372036854776194,9223372036854776056, 9223372036854776154, 9223372036854776156,9223372036854776028, 9223372036854776163, 9223372036854776036,9223372036854775817, 9223372036854776268, 9223372036854775961,9223372036854776304, 9223372036854776253, 9223372036854776066,9223372036854776132, 9223372036854776243, 9223372036854776000,9223372036854775996, 9223372036854776093, 9223372036854775916,9223372036854776227, 9223372036854775847, 9223372036854776043,9223372036854775959, 9223372036854775953, 9223372036854775935,9223372036854776257, 9223372036854776061, 9223372036854776154,9223372036854776237, 9223372036854776296, 9223372036854776227,9223372036854776117, 9223372036854776306, 9223372036854776245,9223372036854776132, 9223372036854776129, 9223372036854776156,9223372036854775965, 9223372036854776044, 9223372036854775818,9223372036854775913, 9223372036854776045, 9223372036854776093,9223372036854776123, 9223372036854776064, 9223372036854775864,9223372036854775898, 9223372036854775837, 9223372036854775915,9223372036854776272, 9223372036854776302, 9223372036854776234,9223372036854776241, 9223372036854776259, 9223372036854775850,9223372036854775911, 9223372036854775852, 9223372036854776023,9223372036854776259, 9223372036854776212, 9223372036854775821,9223372036854775991, 9223372036854776279, 9223372036854776074,9223372036854776298, 9223372036854776115, 9223372036854775809,9223372036854775953, 9223372036854776298, 9223372036854776093,9223372036854775925, 9223372036854776189, 9223372036854775997,9223372036854775923, 9223372036854775863, 9223372036854776298,9223372036854776017, 9223372036854775820, 9223372036854775893,9223372036854776139, 9223372036854776018, 9223372036854775901,9223372036854776082, 9223372036854775953, 9223372036854775914,9223372036854775883, 9223372036854776240, 9223372036854776027,9223372036854776225, 9223372036854776089, 9223372036854776114,9223372036854776157, 9223372036854776084, 9223372036854775888,9223372036854776167, 9223372036854776282, 9223372036854776107,9223372036854775995, 9223372036854776262, 9223372036854776031,9223372036854776123, 9223372036854776297, 9223372036854776009,9223372036854776283, 9223372036854776217, 9223372036854776267,9223372036854776029, 9223372036854776249, 9223372036854775935,9223372036854776238, 9223372036854776004, 9223372036854776059,9223372036854776180, 9223372036854776238, 9223372036854776124,9223372036854776246, 9223372036854776107, 9223372036854776132,9223372036854775862, 9223372036854776172, 9223372036854776134,9223372036854775816, 9223372036854775950, 9223372036854776179,9223372036854775883, 9223372036854776278, 9223372036854776174,9223372036854775998, 9223372036854775836, 9223372036854776060,9223372036854775835, 9223372036854776037, 9223372036854776271,9223372036854776105, 9223372036854775885, 9223372036854775858,9223372036854776216, 9223372036854775908, 9223372036854776129,9223372036854776302, 9223372036854775948, 9223372036854776123,9223372036854776210, 9223372036854775843, 9223372036854776137,9223372036854776147, 9223372036854775867, 9223372036854775940,9223372036854775933, 9223372036854775979, 9223372036854776059,9223372036854775998, 9223372036854775873]